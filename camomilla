#!/bin/python3

# Copyright (c) 2016-2017 Vittorio Romeo
# License: MIT License
# MIT License page: https://opensource.org/licenses/MIT
# http://vittorioromeo.info | vittorio.romeo@outlook.com

import os, stat, sys
import re
import time
import argparse
import json
import pprint
import tempfile

pp = pprint.PrettyPrinter(indent=4)



#
#
#
# -----------------------------------------------------------------------------------------------------------
# Configuration keys
# -----------------------------------------------------------------------------------------------------------

akEnableTemplateCollapsing = 'template-collapsing'
akEnableNamespaceReplacements = 'namespace-replacements'
akEnableGenericReplacements = 'generic-replacements'
akEnableTempCache = 'temp-cache'

ckEnableTemplateCollapsing = 'enableTemplateCollapsing'
ckEnableNamespaceReplacements = 'enableNamespaceReplacements'
ckEnableGenericReplacements = 'enableGenericReplacements'
ckEnableTempCache = 'enableTempCache'
ckTemplateCollapsingDepth = 'templateCollapsingDepth'
ckConfigPaths = 'configPaths'
ckNamespaceReplacements = 'namespaceReplacements'
ckGenericReplacements = 'genericReplacements'
ckCompilationCommand = 'compilationCommand'



#
#
#
# -----------------------------------------------------------------------------------------------------------
# Cache
# -----------------------------------------------------------------------------------------------------------

def writeTempCache(contents):
    with open(tempfile.gettempdir() + "/lastCamomilla.out", "w+") as f:
        f.write(contents)

def readTempCache():
    with open(tempfile.gettempdir() + "/lastCamomilla.out") as f:
        return f.read()



#
#
#
# -----------------------------------------------------------------------------------------------------------
# Configuration/arg parsing
# -----------------------------------------------------------------------------------------------------------

def addFeatureOpt(ap, flagName, key, defaultValue, helpStr):
    ap_feature = ap.add_mutually_exclusive_group(required=False)
    ap_feature.add_argument('--' + flagName, dest=key, action='store_true', help="| Control " + helpStr)
    ap_feature.add_argument('--no-' + flagName, dest=key, action='store_false', help="'")
    ap.set_defaults(**{key:defaultValue})

def makeArgParser():
    ap = argparse.ArgumentParser(\
        formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=256))

    addFeatureOpt(ap, akEnableTemplateCollapsing, ckEnableTemplateCollapsing, True, \
        "template collapsing")

    addFeatureOpt(ap, akEnableNamespaceReplacements, ckEnableNamespaceReplacements, True, \
        "namespace replacements")

    addFeatureOpt(ap, akEnableGenericReplacements, ckEnableGenericReplacements, True, \
        "generic replacements")

    addFeatureOpt(ap, akEnableTempCache, ckEnableTempCache, True, \
        "temp cache")

    ap.add_argument('-d', '--depth', \
        help="Template collapsing depth", \
        type=int, default=1, dest=ckTemplateCollapsingDepth, metavar='X')

    ap.add_argument('-c', '--config', \
        help="Configuration file path(s)", \
        type=str, default="", dest=ckConfigPaths, metavar='P')

    # TODO:
    #
    # ap.add_argument('-x', '--exec', \
    #     help="Execute compilation command", \
    #     type=str, default="", nargs=argparse.REMAINDER, dest=ckCompilationCommand, metavar='X')

    return ap

def propagateArgOverride(key, origin, target):
    if key in origin.keys():
        target[key] = origin[key]

def propagateReplacements(key, origin, target):
    if key in origin.keys():
        for k, v in origin[key].items():
            target[key][k] = v

def propagateConfigPaths(key, origin, target):
    if key in origin.keys():
        for x in origin[key]:
            target[key].add(x)

def loadConfig(path):
    with open(path) as data:
        j = json.load(data)
        res = {
            ckNamespaceReplacements: dict(),
            ckGenericReplacements: dict(),
            ckConfigPaths: set()
        }

        propagateArgOverride(ckEnableNamespaceReplacements, j, res)
        propagateArgOverride(ckEnableGenericReplacements, j, res)
        propagateArgOverride(ckEnableTemplateCollapsing, j, res)
        propagateArgOverride(ckEnableTempCache, j, res)
        propagateArgOverride(ckTemplateCollapsingDepth, j, res)

        propagateReplacements(ckNamespaceReplacements, j, res)
        propagateReplacements(ckGenericReplacements, j, res)

        propagateConfigPaths(ckConfigPaths, j, res)

        return res

# TODO:
class Camomilla:
    def __init__(self, conf):
        self._conf = conf

    def namespaceReplacements(self):
        return self._conf[ckNamespaceReplacements]

    def genericReplacements(self):
        return self._conf[ckGenericReplacements]

    def templateCollapsingDepth(self):
        return self._conf[ckTemplateCollapsingDepth]

    def enableNamespaceReplacements(self):
        return self._conf[ckEnableNamespaceReplacements]

    def enableGenericReplacements(self):
        return self._conf[ckEnableGenericReplacements]

    def enableTemplateCollapsing(self):
        return self._conf[ckEnableTemplateCollapsing]

    # Find all `<...>` pair ranges
    def _find_angles(self, s, xi_start, xi_end):
        result_angle_pairs = []
        open_angles = []

        for i in range(xi_start, xi_end):
            if s[i-1] != ' ' and s[i] == '<':
                open_angles.append(i)

            elif s[i-1] != '-' and s[i] == '>':
                if len(open_angles) == 0:
                    continue

                depth = len(open_angles)
                x = open_angles.pop()
                result_angle_pairs.append((x, i+1, depth))

        return result_angle_pairs

    # Mark a `<...>` pair for removal
    def _mark(self, i_start, i_end):
        return (i_start + 1, i_end - 1)

    # Yield merged overlapping intervals
    # (From 'http://codereview.stackexchange.com/questions/69242')
    def _merged(self, intervals):
        sorted_intervals = sorted(intervals, key=lambda x: x[0])

        if not sorted_intervals:  # no intervals to merge
            return

        # low and high represent the bounds of the current run of merges
        low, high = sorted_intervals[0]

        for iv in sorted_intervals[1:]:
            if iv[0] <= high:  # new interval overlaps current run
                high = max(high, iv[1])  # merge with the current run
            else:  # current run is over
                yield low, high  # yield accumulated interval
                low, high = iv  # start new run

        yield low, high  # end the final run

    # From http://stackoverflow.com/questions/15175142/
    def _multiple_replace(self, k_mapper, v_mapper, xdict, src):
        # Bail out if there are no replacements
        if len(xdict) == 0:
            return src

        # Map keys and values in dictionary
        mapped_dict = {k_mapper(k): v_mapper(v) for k, v in xdict.items()}

        # Create a regular expression  from the dictionary keys
        escaped_keys = map(re.escape, mapped_dict.keys())
        joined_regex_matcher = "({})".format("|".join(escaped_keys))
        regex = re.compile(joined_regex_matcher)

        # For each match, look-up corresponding value in dictionary
        return regex.sub(lambda x: mapped_dict[x.string[x.start():x.end()]], src)

    def process(self, src):
        out = ""
        marked = []

        # Find all angle bracket pairs
        angle_pairs = self._find_angles(src, 0, len(src))

        if self.enableTemplateCollapsing():
            # Mark pairs matching desired depth for removal
            for p in angle_pairs:
                if p[2] > self.templateCollapsingDepth():
                    marked.append(self._mark(p[0], p[1]))

            # Build output string by avoiding marked intervals
            last = 0
            for m in self._merged(marked):
                out += src[last:m[0]]
                last = m[1]
            out += src[last:len(src)]

        if self.enableNamespaceReplacements():
            # Replace namespace matches
            out = self._multiple_replace( \
                lambda k: k + r'::', \
                lambda v: v + r'::' if len(v) > 0 else '', \
                self.namespaceReplacements(), out)

        if self.enableGenericReplacements():
            # Replace generic matches
            out = self._multiple_replace( \
                lambda k: k, \
                lambda v: v, \
                self.genericReplacements(), out)

        # Print result
        print(out)

def mergeConfig(parent, x):
    # Recursively merge configs
    if ckConfigPaths in x.keys():
        for child in x[ckConfigPaths]:
            x = mergeConfig(x, loadConfig(child))

    propagateArgOverride(ckEnableNamespaceReplacements, x, parent)
    propagateArgOverride(ckEnableGenericReplacements, x, parent)
    propagateArgOverride(ckEnableTemplateCollapsing, x, parent)
    propagateArgOverride(ckEnableTempCache, j, res)
    propagateArgOverride(ckTemplateCollapsingDepth, x, parent)

    propagateReplacements(ckNamespaceReplacements, x, parent)
    propagateReplacements(ckGenericReplacements, x, parent)

    return parent

def makeInitialConfig(args):
    conf = vars(args[0])
    conf[ckNamespaceReplacements] = dict()
    conf[ckGenericReplacements] = dict()
    conf[ckConfigPaths] = [] if len(conf[ckConfigPaths]) == 0 else conf[ckConfigPaths].split(' ')

    conf[ckNamespaceReplacements]["std"] = ""
    conf[ckGenericReplacements]["<>"] = "<?>"

    return conf

def makeFinalConfig():
    ap = makeArgParser()
    args = ap.parse_known_args()
    conf = makeInitialConfig(args)

    # TODO:
    #
    # compilationCmd = ' '.join(conf[ckCompilationCommand])
    #
    # if compilationCmd == "":
    #     src = sys.stdin.read()
    # else:
    #     print("Warning: stdin data will be ignored because '-x' is being used.")
    #     os.system('(' + compilationCmd + ')')

    for child in conf[ckConfigPaths]:
        conf = mergeConfig(conf, loadConfig(child))

    return conf



#
#
#
# -----------------------------------------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------------------------------------

def main():
    conf = makeFinalConfig()
    camomilla = Camomilla(conf)
    camomilla.process(sys.stdin.read())

    # pp.pprint(camomilla.namespaceReplacements())
    # pp.pprint(camomilla.genericReplacements())

    return 0

if __name__ == "__main__":
    sys.exit(main())











# TODO: flags to enable/disable
# TODO: config files!!!
# TODO: tuple<a, b, c> -> @(a, b, c)
# TODO: pair<a, b> -> @(a, b)


# Namespace replacements
ns_replacement(r'std', r'')
ns_replacement(r'boost::hana', r'bh')
ns_replacement(r'boost::fusion', r'bf')
ns_replacement(r'boost::spirit', r'bs')

# TODO: case insensitive
ns_replacement(r'impl', r'_')
ns_replacement(r'implementation', r'_')
ns_replacement(r'detail', r'_')

# TODO: vrm specific
ns_replacement(r'vrm::core', r'vrmc')

# TODO: ecst specific
ns_replacement(r'ecst', r'')
ns_replacement(r'system_execution_adapter', r'sea')
ns_replacement(r'context', r'ctx')
ns_replacement(r'tag::system', r'tag_s')
ns_replacement(r'tag::component', r'tag_c')

# Non-namespace replacements
replacement(r'integral_constant', r'ic')
replacement(r'lambda\(', r'[](')
replacement(r'size_t', r'sz_t')
replacement(r'unsigned ', r'u')
replacement(r'long u', r'ul')
replacement(r'type_impl', r'type')
replacement(r'tag_impl', r'tag')
replacement(r'forward', r'fwd')
replacement(r'<>', r'<?>')

